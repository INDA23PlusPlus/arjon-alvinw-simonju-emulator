{"message":"unused imports: `IndexMut`, `Index`, `error::Error`, `os::unix::prelude::FileExt`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/instruction_parser.rs","byte_start":16,"byte_end":21,"line_start":1,"line_end":1,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":23,"byte_end":31,"line_start":1,"line_end":1,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":24,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":34,"byte_end":46,"line_start":1,"line_end":1,"column_start":35,"column_end":47,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":35,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":58,"byte_end":84,"line_start":1,"line_end":1,"column_start":59,"column_end":85,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":59,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":97,"byte_end":101,"line_start":1,"line_end":1,"column_start":98,"column_end":102,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":98,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/instruction_parser.rs","byte_start":10,"byte_end":48,"line_start":1,"line_end":1,"column_start":11,"column_end":49,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":11,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":56,"byte_end":84,"line_start":1,"line_end":1,"column_start":57,"column_end":85,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":57,"highlight_end":85}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":95,"byte_end":101,"line_start":1,"line_end":1,"column_start":96,"column_end":102,"is_primary":true,"text":[{"text":"use std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};","highlight_start":96,"highlight_end":102}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `IndexMut`, `Index`, `error::Error`, `os::unix::prelude::FileExt`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction_parser.rs:1:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{ops::{Index, IndexMut}, error::Error, fs::File, os::unix::prelude::FileExt, io::{Read, self}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"this enum variant takes 1 argument but 0 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/instruction_parser.rs","byte_start":1677,"byte_end":1679,"line_start":64,"line_end":64,"column_start":36,"column_end":38,"is_primary":false,"text":[{"text":"                    _ => return Err()","highlight_start":36,"highlight_end":38}],"label":"an argument of type `std::io::Error` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instruction_parser.rs","byte_start":1674,"byte_end":1677,"line_start":64,"line_end":64,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"                    _ => return Err()","highlight_start":33,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"tuple variant defined here","code":null,"level":"note","spans":[{"file_name":"/home/sj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs","byte_start":18540,"byte_end":18543,"line_start":511,"line_end":511,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/instruction_parser.rs","byte_start":1677,"byte_end":1679,"line_start":64,"line_end":64,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"                    _ => return Err()","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":"(/* std::io::Error */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this enum variant takes 1 argument but 0 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instruction_parser.rs:64:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    _ => return Err()\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `std::io::Error` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: tuple variant defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/sj/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:511:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Err(#[stable(feature = \"rust1\", since = \"1.0.0\")] E),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    _ => return Err\u001b[0m\u001b[0m\u001b[38;5;10m(/* std::io::Error */)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to previous error; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error; 1 warning emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0061`.\u001b[0m\n"}
